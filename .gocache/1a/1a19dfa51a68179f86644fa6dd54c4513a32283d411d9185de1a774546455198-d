//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-g"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "Foundation"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "CoreGraphics"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "ScreenCaptureKit"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "CoreImage"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "ImageIO"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "AVFoundation"
// Code generated by cmd/cgo; DO NOT EDIT.

package screenshots

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_keepalive runtime.cgoKeepAlive
//go:noescape
func _Cgo_keepalive(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype_CFDataRef uintptr

type _Ctype_CFIndex = _Ctype_long

type _Ctype_CFStringRef uintptr

type _Ctype_CFTypeID = _Ctype_ulong

type _Ctype_CFTypeRef uintptr

type _Ctype_UInt8 = _Ctype_uchar

type _Ctype__GoBytes_ []byte

type _Ctype__GoString_ string

type _Ctype_char int8

type _Ctype_double float64

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct_CaptureBuffer struct {
	data		_Ctype_CFDataRef
	pixel_format	_Ctype_CFStringRef
	width		_Ctype_size_t
	height		_Ctype_size_t
	scale		_Ctype_double
	used_sc		_Ctype_int
	err		*_Ctype_char
}

type _Ctype_struct___CFData _cgopackage.Incomplete

type _Ctype_struct___CFString _cgopackage.Incomplete

type _Ctype_uchar uint8

type _Ctype_ulong uint64

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_bb641441ea64_Cfunc_CFRelease
//go:linkname __cgofn__cgo_bb641441ea64_Cfunc_CFRelease _cgo_bb641441ea64_Cfunc_CFRelease
var __cgofn__cgo_bb641441ea64_Cfunc_CFRelease byte
var _cgo_bb641441ea64_Cfunc_CFRelease = unsafe.Pointer(&__cgofn__cgo_bb641441ea64_Cfunc_CFRelease)

//go:cgo_unsafe_args
func _Cfunc_CFRelease(p0 _Ctype_CFTypeRef) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_bb641441ea64_Cfunc_CFRelease, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}

//go:linkname _cgo_runtime_gobytes runtime.gobytes
func _cgo_runtime_gobytes(unsafe.Pointer, int) []byte

// GoBytes converts the C data p with explicit length l to a Go []byte.
func _Cfunc_GoBytes(p unsafe.Pointer, l _Ctype_int) []byte {
	return _cgo_runtime_gobytes(p, int(l))
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

// GoString converts the C string p into a Go string.
func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}
//go:cgo_import_static _cgo_bb641441ea64_Cfunc_capture_buffer_bytes
//go:linkname __cgofn__cgo_bb641441ea64_Cfunc_capture_buffer_bytes _cgo_bb641441ea64_Cfunc_capture_buffer_bytes
var __cgofn__cgo_bb641441ea64_Cfunc_capture_buffer_bytes byte
var _cgo_bb641441ea64_Cfunc_capture_buffer_bytes = unsafe.Pointer(&__cgofn__cgo_bb641441ea64_Cfunc_capture_buffer_bytes)

//go:cgo_unsafe_args
func _Cfunc_capture_buffer_bytes(p0 _Ctype_CFDataRef) (r1 *_Ctype_UInt8) {
	_cgo_runtime_cgocall(_cgo_bb641441ea64_Cfunc_capture_buffer_bytes, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_bb641441ea64_Cfunc_capture_buffer_length
//go:linkname __cgofn__cgo_bb641441ea64_Cfunc_capture_buffer_length _cgo_bb641441ea64_Cfunc_capture_buffer_length
var __cgofn__cgo_bb641441ea64_Cfunc_capture_buffer_length byte
var _cgo_bb641441ea64_Cfunc_capture_buffer_length = unsafe.Pointer(&__cgofn__cgo_bb641441ea64_Cfunc_capture_buffer_length)

//go:cgo_unsafe_args
func _Cfunc_capture_buffer_length(p0 _Ctype_CFDataRef) (r1 _Ctype_CFIndex) {
	_cgo_runtime_cgocall(_cgo_bb641441ea64_Cfunc_capture_buffer_length, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_bb641441ea64_Cfunc_capture_screen_frame
//go:linkname __cgofn__cgo_bb641441ea64_Cfunc_capture_screen_frame _cgo_bb641441ea64_Cfunc_capture_screen_frame
var __cgofn__cgo_bb641441ea64_Cfunc_capture_screen_frame byte
var _cgo_bb641441ea64_Cfunc_capture_screen_frame = unsafe.Pointer(&__cgofn__cgo_bb641441ea64_Cfunc_capture_screen_frame)

//go:cgo_unsafe_args
func _Cfunc_capture_screen_frame() (r1 _Ctype_struct_CaptureBuffer) {
	_cgo_runtime_cgocall(_cgo_bb641441ea64_Cfunc_capture_screen_frame, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
//go:cgo_import_static _cgo_bb641441ea64_Cfunc_cfstring_copy_utf8
//go:linkname __cgofn__cgo_bb641441ea64_Cfunc_cfstring_copy_utf8 _cgo_bb641441ea64_Cfunc_cfstring_copy_utf8
var __cgofn__cgo_bb641441ea64_Cfunc_cfstring_copy_utf8 byte
var _cgo_bb641441ea64_Cfunc_cfstring_copy_utf8 = unsafe.Pointer(&__cgofn__cgo_bb641441ea64_Cfunc_cfstring_copy_utf8)

//go:cgo_unsafe_args
func _Cfunc_cfstring_copy_utf8(p0 _Ctype_CFStringRef) (r1 *_Ctype_char) {
	_cgo_runtime_cgocall(_cgo_bb641441ea64_Cfunc_cfstring_copy_utf8, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_bb641441ea64_Cfunc_free
//go:linkname __cgofn__cgo_bb641441ea64_Cfunc_free _cgo_bb641441ea64_Cfunc_free
var __cgofn__cgo_bb641441ea64_Cfunc_free byte
var _cgo_bb641441ea64_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_bb641441ea64_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_bb641441ea64_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
